""" Copyright (c) 2020, Daniela Szwarcman and IBM Research
    * Licensed under The MIT License [see LICENSE for details]

    - Retrain CNN model generated by Q-NAS.
"""

import argparse
import os

import numpy as np

from cnn.input import (Dataloader, Dataset, get_validation_augmentation)


def main(**args):

    patch_size = (args['image_size'], args['image_size'], args['num_channels'])
    val_augmentation = get_validation_augmentation(patch_size)
    
    val_dataset = Dataset(
        data_path=os.path.join(args['data_path'], 'train'),
        selected=None,
        only_non_empty_slices=True,
    )
    
    val_dataloader = Dataloader(
        dataset=val_dataset,
        augmentation=val_augmentation,
        shuffle=False,
    )

    data = {}
    num_images = 0
    for image, mask in val_dataloader:
        unique, count = np.unique(mask, return_counts=True)
        for uq, c in zip(unique, count):
            if uq in data:
                data[uq] += c/np.sum(count)
            else:
                data[uq] = c/np.sum(count)
        num_images += 1
    for k in data:
        data[k] = data[k]/num_images
    print(f"Train data: {data} ")

    test_dataset = Dataset(
        data_path=os.path.join(args['data_path'], 'test'),
        selected=None,
        only_non_empty_slices=True,
    )
    
    test_dataloader = Dataloader(
        dataset=test_dataset,
        augmentation=val_augmentation,#only resize image
        shuffle=False,
    )

    data = {}
    num_images = 0
    for image, mask in test_dataloader:
        unique, count = np.unique(mask, return_counts=True)
        for uq, c in zip(unique, count):
            if uq in data:
                data[uq] += c/np.sum(count)
            else:
                data[uq] = c/np.sum(count)
        num_images += 1
    for k in data:
        data[k] = data[k]/num_images
    print(f"Test data: {data} ")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--data_path", type=str, required=True, help="Path to experiment_path."
    )

    parser.add_argument(
        "--image_size", type=int, required=True, help="Size of the image."
    )

    parser.add_argument(
        "--num_channels", type=int, required=True, help="Channels of the image."
    )

    arguments = parser.parse_args()

    main(**vars(arguments))