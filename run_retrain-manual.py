# """ Copyright (c) 2020, Daniela Szwarcman and IBM Research
#     * Licensed under The MIT License [see LICENSE for details]

#     - Retrain CNN model generated by Q-NAS.
# """

from cnn.train import cross_val_train

train_params = {
    "batch_size": 32,
    "epochs": 100,
    "eval_epochs": 20,
    "initializations": 5,
    "folds": 5,
    "stem_filters": 32,
    "max_depth": 4,
    "data_path": "spleen_dataset/data/Task09_Spleen_preprocessed/",
    "image_size": 128,
    "skip_slices": 0,
    "num_channels": 1,
    "num_classes": 2,
    "data_augmentation": True,
    "experiment_path": "config_experiment_4_spleen_guilherme"
}

unet = [
    "vgg_n_3",
    "vgg_d_3",
    "vgg_d_3",
    "vgg_d_3",
    "vgg_d_3",
    "vgg_u_3",
    "vgg_u_3",
    "vgg_u_3",
    "vgg_u_3",
    "vgg_n_3",
]

experiment_1_8 = [
    "vgg_d_3",
    "vgg_d_3",
    "vgg_n_3",
    "ide_d",
    "vgg_n_3",
    "vgg_d_3",
    "vgg_u_3",
    "ide_d",
    "vgg_n_3",
    "ide_d"
]

experiment_1_9 = [
    "ide_u",
    "vgg_d_3",
    "vgg_d_3",
    "ide_d",
    "vgg_n_3",
    "ide_d",
    "vgg_u_3",
    "vgg_d_3",
    "vgg_d_3",
    "ide_u"
]


experiment_4_prostate = [
    "res_d_3",
    "res_n_5",
    "res_d_7",
    "vgg_d_5",
    "res_d_7",
    "den_n_5",
    "res_d_7",
    "inc_n_3",
    "den_n_5",
    "inc_d_5"
]

experiment_4_spleen = [
    "inc_n_3",
    "den_d_3",
    "den_d_3",
    "res_u_5",
    "res_n_3",
    "res_n_5",
    "res_d_5",
    "den_n_5",
    "den_n_5",
    "den_d_3"
]

net_list = experiment_4_spleen

layer_dict = {
        'den_d_3': {'cell': 'DownscalingCell', 'block': 'DenseBlock',     'kernel': 3, 'prob': 1/39},
        'den_d_5': {'cell': 'DownscalingCell', 'block': 'DenseBlock',     'kernel': 5, 'prob': 1/39},
        'den_d_7': {'cell': 'DownscalingCell', 'block': 'DenseBlock',     'kernel': 7, 'prob': 1/39},
        'den_n_3': {'cell': 'NonscalingCell',  'block': 'DenseBlock',     'kernel': 3, 'prob': 1/39},
        'den_n_5': {'cell': 'NonscalingCell',  'block': 'DenseBlock',     'kernel': 5, 'prob': 1/39},
        'den_n_7': {'cell': 'NonscalingCell',  'block': 'DenseBlock',     'kernel': 7, 'prob': 1/39},
        'den_u_3': {'cell': 'UpscalingCell',   'block': 'DenseBlock',     'kernel': 3, 'prob': 1/39},
        'den_u_5': {'cell': 'UpscalingCell',   'block': 'DenseBlock',     'kernel': 5, 'prob': 1/39},
        'den_u_7': {'cell': 'UpscalingCell',   'block': 'DenseBlock',     'kernel': 7, 'prob': 1/39},
        'inc_d_3': {'cell': 'DownscalingCell', 'block': 'InceptionBlock', 'kernel': 3, 'prob': 1/39},
        'inc_d_5': {'cell': 'DownscalingCell', 'block': 'InceptionBlock', 'kernel': 5, 'prob': 1/39},
        'inc_d_7': {'cell': 'DownscalingCell', 'block': 'InceptionBlock', 'kernel': 7, 'prob': 1/39},
        'inc_n_3': {'cell': 'NonscalingCell',  'block': 'InceptionBlock', 'kernel': 3, 'prob': 1/39},
        'inc_n_5': {'cell': 'NonscalingCell',  'block': 'InceptionBlock', 'kernel': 5, 'prob': 1/39},
        'inc_n_7': {'cell': 'NonscalingCell',  'block': 'InceptionBlock', 'kernel': 7, 'prob': 1/39},
        'inc_u_3': {'cell': 'UpscalingCell',   'block': 'InceptionBlock', 'kernel': 3, 'prob': 1/39},
        'inc_u_5': {'cell': 'UpscalingCell',   'block': 'InceptionBlock', 'kernel': 5, 'prob': 1/39},
        'inc_u_7': {'cell': 'UpscalingCell',   'block': 'InceptionBlock', 'kernel': 7, 'prob': 1/39},
        'ide_d':   {'cell': 'DownscalingCell', 'block': 'IdentityBlock',               'prob': 1/39},
        'ide_n':   {'cell': 'NonscalingCell',  'block': 'IdentityBlock',               'prob': 1/39},   
        'ide_u':   {'cell': 'UpscalingCell',   'block': 'IdentityBlock',               'prob': 1/39},
        'res_d_3': {'cell': 'DownscalingCell', 'block': 'ResNetBlock',    'kernel': 3, 'prob': 1/39},
        'res_d_5': {'cell': 'DownscalingCell', 'block': 'ResNetBlock',    'kernel': 5, 'prob': 1/39},
        'res_d_7': {'cell': 'DownscalingCell', 'block': 'ResNetBlock',    'kernel': 7, 'prob': 1/39},
        'res_n_3': {'cell': 'NonscalingCell',  'block': 'ResNetBlock',    'kernel': 3, 'prob': 1/39},
        'res_n_5': {'cell': 'NonscalingCell',  'block': 'ResNetBlock',    'kernel': 5, 'prob': 1/39},
        'res_n_7': {'cell': 'NonscalingCell',  'block': 'ResNetBlock',    'kernel': 7, 'prob': 1/39},
        'res_u_3': {'cell': 'UpscalingCell',   'block': 'ResNetBlock',    'kernel': 3, 'prob': 1/39},
        'res_u_5': {'cell': 'UpscalingCell',   'block': 'ResNetBlock',    'kernel': 5, 'prob': 1/39},
        'res_u_7': {'cell': 'UpscalingCell',   'block': 'ResNetBlock',    'kernel': 7, 'prob': 1/39},
        'vgg_d_3': {'cell': 'DownscalingCell', 'block': 'VGGBlock',       'kernel': 3, 'prob': 1/39},
        'vgg_d_5': {'cell': 'DownscalingCell', 'block': 'VGGBlock',       'kernel': 5, 'prob': 1/39},
        'vgg_d_7': {'cell': 'DownscalingCell', 'block': 'VGGBlock',       'kernel': 7, 'prob': 1/39},
        'vgg_n_3': {'cell': 'NonscalingCell',  'block': 'VGGBlock',       'kernel': 3, 'prob': 1/39},
        'vgg_n_5': {'cell': 'NonscalingCell',  'block': 'VGGBlock',       'kernel': 5, 'prob': 1/39},
        'vgg_n_7': {'cell': 'NonscalingCell',  'block': 'VGGBlock',       'kernel': 7, 'prob': 1/39},
        'vgg_u_3': {'cell': 'UpscalingCell',   'block': 'VGGBlock',       'kernel': 3, 'prob': 1/39},
        'vgg_u_5': {'cell': 'UpscalingCell',   'block': 'VGGBlock',       'kernel': 5, 'prob': 1/39},
        'vgg_u_7': {'cell': 'UpscalingCell',   'block': 'VGGBlock',       'kernel': 7, 'prob': 1/39},
    }

mean_dsc, std_dsc = cross_val_train(train_params, layer_dict, net_list)

print(f"{mean_dsc} +- {std_dsc}")
